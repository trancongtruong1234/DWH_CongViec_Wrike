<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/22/2022 11:10:05 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CTRUONG"
  DTS:CreatorName="CTRUONG\tranc"
  DTS:DTSID="{01EFCBFE-0916-4EF5-8216-22C1AF257AD5}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.521.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="307"
  DTS:VersionGUID="{DBA9BEB6-5927-40BD-BBC9-B115A11DAA91}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[CTRUONG.DB_Goc_Wrike]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{1714B407-E2EE-44E3-8774-35B878CB8DEA}"
      DTS:ObjectName="CTRUONG.DB_Goc_Wrike">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=CTRUONG;Initial Catalog=DB_Goc_Wrike;Integrated Security=True;Application Name=SSIS-Package-{1714B407-E2EE-44E3-8774-35B878CB8DEA}CTRUONG.DB_Goc_Wrike;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[CTRUONG.DB_Goc_Wrike1]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{24FF94F3-52B6-4FC7-A069-93172B5D55BC}"
      DTS:ObjectName="CTRUONG.DB_Goc_Wrike1">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectRetryCount="1"
          DTS:ConnectRetryInterval="5"
          DTS:ConnectionString="Data Source=CTRUONG;Initial Catalog=DB_Goc_Wrike;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[HTTP 1]"
      DTS:CreationName="ZS-HTTP"
      DTS:DTSID="{0027D754-B03D-4EB1-8DF4-DEF30DA3277F}"
      DTS:ObjectName="HTTP 1">
      <DTS:ObjectData>
        <ConnectionManager
          ConnectionString="Url=https://storage.www.wrike.com/data_export/resource/318316018?accountId=3991254;CredentialType=Token;UserName=;Timeout=100000;SoapWssPasswordType=Notset;JwtCustomClaims=;RetainCookies=False;SslVersion=Default;RetryMode=None;RetryCountMax=3;RetryWaitTimeMs=2000;RetryMultiplyWaitTime=False;RetryMessageList=;RetryStatusCodeList=;AuthScheme=Bearer;TokenAuthHeader=;TokenFunction=;TokenUrl=;TokenRequestData=;TokenRequestHeaders=Accept:*/*||Cache-Control:no-cache;TokenRequestMethod=;TokenRequestContentType=Default;TokenRequestIsMultiPart=False;TokenResponseContentFilter=;TokenResponseValueExtractMode=Body;TokenResponseCookie=;TokenResponseHeader=;TokenResponseContentType=None;TokenExpirationTimeInSeconds=3600;EnableRequestHashing=False;HashAlgorithm=sha256;HashSignatureFormat=;HashSignatureFormatForLogin=;ExtraHeaders=;ExtraHeadersForLogin=;HashTimestampFormat=;HashTreatSecretAsNonBase64=False;HashSignWithApiKey=False;HashDoNotSign=False;RetainSameConnection=False;UseClientCertificate=False;CertificatePath=;CertificateStorageType=CurrentUser;CertificateStoreName=My;CertificateThumbprint=;UseProxy=False;ProxyUrl=;UseProxyCreds=False;ProxyUserName=;DoNotUseDefaultProxy=False"
          ConnectByProxy="False">
          <Password
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAMvwAC8e+cUqNpHM3/bl/bgAAAAAIAAAARABUAFMAAAAQZgAAAAEAACAAAACBY5bkpzR6WLakefdyFfwZpuVcshKzf78R/zsdz3rlawAAAAAOgAAAAAIAACAAAACLqml5Euc5RZiiVcLb1F1RS6yxUqNCzicglaNJfDZ3l7ACAAC48QArpCso6XzOC9kNPjtiXNoFepNejo2T6w8k8jVmoHDjYkD7ItgdCGFPf49VHlC4r0cyHaAmPPZyN6vzxxxtI39+ttEQS0Flb4FKjZCCd9MYbWh0Jpayp+2o8uhw4aK7IBpWbcHGKpv1yXVSBNR5aGag1Tx0/JsmRwWkS+GC3yzQqgJu2jku2jxP5nXTgoIpc0gz+BDtJg7//rMC9c6+8rm55odziJKyl+fp+KfNIJopuxyHqvjvFYCpdFaAkTXVD8Pk4fmSN4PExN1iRzaRod9lEeKnmBnHyhtGjCgP4eE17y9AG71AErCMVXlm7p0ZSDHw+Tds+XW5tzpke/cmP+JLCC8u2SyDll7urGeLqRonpla7Jj5+kEdPpjpwSS5JuruzZOEneIbbofcNaOHI1DJijllbaGDOKkdFfi/TJ75lroNjb8L/EvxBpAdyXaO81MxAnm+5sMhK28kWQwPx9X+1YHuDh+ZJwjoyHBdXwO2rk53QeH4NZKjmqr9FvHJFxqxc6snbqh96zOdIjGQjSbP2iQgiC7wzAuM/KKwRoMk4MMTSTRbcphANK826A6HS4v5FheExwE3cafzfi0jQYO6luNO8+Cwfz0K7QrDa4aQPIT7qgbuaJft0sh7I2qEuIjQ6SByfQDdxk7nnNwF0ZYmcVqn/lI7FNgga/+WUGrDX10X6FbHeBjp+FImM+NH+Rn3m0SHlVL+rRHaaNMUmIA4sBTDGHgSo1sdIA5Aqt+do4+k9PyP1R2VM94eJASffx4X/r9gc4Xbd7p3RMPQOY+9Iws6HOqzuiHe2tx2OzbcOXilqay73eF7CtAdOHuX9IsfwagWmVWYd87JxVkz4P0FJo/BmEx+EVynWh27h+zCHO6poCFykn/yfGMHICGcGvQ2vVyOqcQmoj+rwv0ZYQAAAAJt/ATiJH1cbavOT+NPYODgPZP8iPXipBXDWcmYpeWaCVijY9Gp8qn2hmV+ODP6qkekcJzTYSmvfvTixAY73EfA</Password>
        </ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{A6719B90-A662-4D7B-9510-7A5EC29C0F42}"
      DTS:ObjectName="Wrike_Url">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">https://www.wrike.com/api/v4</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Creat and load data to table"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{0a1a65d9-d432-45a2-8a12-7d1ab833e621}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Creat and load data to table"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_b508356f48b24bbb9ffc1880ecd66ff0"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Package::Wrike_Url">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ST_b508356f48b24bbb9ffc1880ecd66ff0.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{7D2DEF8A-8968-4FC2-AE63-9C326B235FEF}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_f14e8c1995334e8881a105123d0b9c0e</RootNamespace><AssemblyName>ST_b508356f48b24bbb9ffc1880ecd66ff0</AssemblyName><TargetFrameworkVersion>v4.5</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL"><HintPath>C:\Users\tranc\AppData\Local\Temp\Vsta\SSIS_ST130\VstaKyh_MEehikGrkauf_pgSrw\packages\Newtonsoft.Json.6.0.4\lib\net45\Newtonsoft.Json.dll</HintPath></Reference><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Net.Http" /><Reference Include="System.Net.Http.Formatting, Version=5.2.9.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"><HintPath>C:\Users\tranc\AppData\Local\Temp\Vsta\SSIS_ST130\VstaKyh_MEehikGrkauf_pgSrw\packages\Microsoft.AspNet.WebApi.Client.5.2.9\lib\net45\System.Net.Http.Formatting.dll</HintPath></Reference><Reference Include="System.Net.Http.WebRequest" /><Reference Include="System.Web.Extensions" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="packages.config" /><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST130</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Data.OleDb;
using System.Net;
using System.Text;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
#endregion

namespace ST_f14e8c1995334e8881a105123d0b9c0e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion
        ConnectionManager cm;
        System.Data.SqlClient.SqlConnection sqlConn;
        System.Data.SqlClient.SqlCommand sqlComm;


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {

            List<string> errList = new List<string>();
            string errRow = "";

            string reLine(string input)
            {
                int flat = 0;
                int check = 0;

                input = input.Replace("\r\r", string.Empty);
                input = input.Replace("\r", string.Empty);
                input = input.Replace("\r\n", string.Empty);
                input = input.Replace("\n\r", string.Empty);
                input = input.Replace("\n\n", string.Empty);

                string result = "";
                char a = '"';
                try
                {

                    for (int i = 0; i < input.Length; i++)
                    {
                        if (input[i] == '\n')
                        {
                            check = 0;
                            for (int j = i; j > flat; j--)
                            {
                                if (input[j] ==a)
                                {
                                    check += 1;
                                }
                            }
                            if(check %2 == 0)
                            {
                                result += input[i];
                                flat = i;
                            }
                            else
                            {
                                result += " ";
                            }
                        }
                        else
                        {
                            result += input[i];
                        }
                    }
                }
                catch
                {
                    MessageBox.Show("Line-down processing fail");
                }
                return result;
            }

            string reString(string input)
            {
                //MessageBox.Show("input: " + input);
                int flat = 0;
                int check = 0;
                string result = input;

                result = result.Replace("'", string.Empty);
                result = "N'" + result;

                char a = '"';

                for ( int i =1; i< result.Length; i++)
                {
                     if (i == result.Length - 1 && result[i] == ',')
                    {
                        result = result.Insert(result.Length - 1, "'");
                        result = result + "'";
                        break;
                    }
                    else if (result[i] == ',' && i < result.Length -1)
                    {
                        check = 0;
                        for (int j =i; j>=flat;j--)
                            {
                                if (result[j] == a)
                                    check += 1;
                            }
                        if(check % 2 ==0)
                            {
                                flat = i+1;
                                result = result.Insert(i, "'");
                                result = result.Insert(i + 2, "N'");
                                i += 3;
                            }
                    }
                }
                result = result.Replace(a.ToString(), string.Empty) + "'";
                //MessageBox.Show("reslut: " + result);
                return result ;
            }
            void insert(string tableName, string columns)
            {
                string sql = "";
                string cl = reString(columns);
                try
                {
                    // Tạo chuỗi kết nối
                    SqlConnection myADONETConnection =
                        Dts.Connections["CTRUONG.DB_Goc_Wrike"].AcquireConnection(Dts.Transaction) as SqlConnection;
                    //MessageBox.Show(myADONETConnection.ConnectionString, "ADO.NET Connection");

                    // Xử lý row
                    sql = "Insert into ["
                        + tableName + "] Values ("
                        + cl + ")";
                    //MessageBox.Show("sql: " + sql);

                    // thực thi sql command 
                    SqlCommand command;
                    command = new SqlCommand(sql, myADONETConnection);
                    command.ExecuteNonQuery();

                    // reset conn
                    Dts.Connections["CTRUONG.DB_Goc_Wrike"].ReleaseConnection(myADONETConnection);
                }
                catch
                {
                    //MessageBox.Show("Insert fail");
                    MessageBox.Show("Sql: " + sql);
                    errRow += cl + " \n";

                }
            }

            void create(string tableName, string columns)
            {
                string sql = "";
                try
                {
                    // Tạo chuỗi kết nối
                    SqlConnection myADONETConnection =
                        Dts.Connections["CTRUONG.DB_Goc_Wrike"].AcquireConnection(Dts.Transaction) as SqlConnection;
                    //MessageBox.Show(myADONETConnection.ConnectionString, "ADO.NET Connection");

                    string cl = "";
                    string[] c = columns.Split(',');
                    foreach (string item in c)
                    {
                        cl = cl + item + " nvarchar(4000)" + ", ";
                    }
                    sql = "If not exists (select * from sysobjects where name='"
                        + tableName + "' and xtype='U') CREATE TABLE ["
                        + tableName + "]("
                        + cl + ")";
                   // MessageBox.Show("sql: " + sql);

                    // thực thi sql command 
                    SqlCommand command;
                    command = new SqlCommand(sql, myADONETConnection);
                    command.ExecuteNonQuery();

                    // reset conn
                    Dts.Connections["CTRUONG.DB_Goc_Wrike"].ReleaseConnection(myADONETConnection);
                }
                catch
                {
                    //MessageBox.Show("Create fail");
                    //MessageBox.Show("Sql: " + sql);
                }
            }

            void loadData(string tableName, string url)
            {
                try
                {
                    // Khởi tạo apl call

                    // Truyền url
                    string wrikeUrl = url;
                    HttpClient client = new HttpClient();
                    client.BaseAddress = new Uri(wrikeUrl);

                    // Truyền token, khai báo authorization type
                    client.DefaultRequestHeaders.Accept.Add(
                    new MediaTypeWithQualityHeaderValue("application/json"));
                    string accesstoken = "eyJ0dCI6InAiLCJhbGciOiJIUzI1NiIsInR2IjoiMSJ9.eyJkIjoie1wiYVwiOjM5OTEyNTQsXCJpXCI6ODI1OTMyNyxcImNcIjo0NjMzMjk4LFwidVwiOjExODY2NTI2LFwiclwiOlwiVVNcIixcInNcIjpbXCJXXCIsXCJGXCIsXCJJXCIsXCJVXCIsXCJLXCIsXCJDXCIsXCJEXCIsXCJNXCIsXCJBXCIsXCJMXCIsXCJQXCJdLFwielwiOltdLFwidFwiOjB9IiwiaWF0IjoxNjU0NzQzNjM1fQ.b0-lt1XPep975qDSqIzfu3EaeiU1Km9YjjADS3l7JVw";
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accesstoken);

                    // Tạo url chứa data
                    string APIUrl = string.Format(wrikeUrl);
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                    // Lưu kết quả
                    var response = client.GetAsync(APIUrl).Result;


                    if (response.IsSuccessStatusCode)
                    {
                        // Lấy giá trị của kết quả trả về
                        var result = response.Content.ReadAsStringAsync().Result;
                        //MessageBox.Show("reslut: " + result);


                        using (StringReader reader = new StringReader(result))
                        {
                            string lines = reader.ReadLine();
                            create(tableName, lines.Trim());

                            string data = reLine(reader.ReadToEnd());

                            using(StringReader readata = new StringReader(data))
                            {
                                while ((lines = readata.ReadLine()) != null)
                                {
                                    insert(tableName, lines);
                                }
                            }
                        }

                        Dts.TaskResult = (int)ScriptResults.Success;
                    }
                    else
                    {
                        Dts.TaskResult = (int)ScriptResults.Failure;
                       // MessageBox.Show("Load fail");
                    }
                }
                catch
                {
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }
            }
            void loadDataToTable()
            {
                DataTable dataTable = new DataTable();
                //string tableName = "";
                //string url = "";

/*                string tableName = "test";
                string url = "https://storage.www.wrike.com/data_export/resource/319921131?accountId=3991254";
                loadData(tableName, url);
                errList.Add(errRow);*/

                string sql = "";
                try
                {
                    // Tạo chuỗi kết nối
                    SqlConnection myADONETConnection =
                        Dts.Connections["CTRUONG.DB_Goc_Wrike"].AcquireConnection(Dts.Transaction) as SqlConnection;
                    sql = "Select * from Data_URL";
                    // MessageBox.Show("sql: " + sql);

                    // thực thi sql command 
                    SqlCommand command;
                    command = new SqlCommand(sql, myADONETConnection);
                    SqlDataAdapter da = new SqlDataAdapter(command);
                    // this will query your database and return the result to your datatable
                    da.Fill(dataTable);

                    //dataTable.Rows.Count - 1
                    for (int i = 0; i < dataTable.Rows.Count; i++) {

                        string tableName = dataTable.Rows[i][0].ToString().Trim();
                        string url = dataTable.Rows[i][1].ToString().Trim();

                        errRow = tableName+": \n";
                        //MessageBox.Show("bat dau load table: " + tableName + "url: "+ url);
                        loadData(tableName, url);
                        //MessageBox.Show("load thanh cong table: " + tableName);
                        errList.Add(errRow); 
                    } 
                    foreach(string item in errList) {
                        MessageBox.Show("Cac dong loi: " + item); }
                    MessageBox.Show("Load thanh cong table: ");
                    // reset conn
                    Dts.Connections["CTRUONG.DB_Goc_Wrike"].ReleaseConnection(myADONETConnection);
                }
                catch
                {
                    MessageBox.Show("Create table fail");
                    MessageBox.Show("Sql: " + sql);
                }
            }
            loadDataToTable();
        }
   #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_f14e8c1995334e8881a105123d0b9c0e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_f14e8c1995334e8881a105123d0b9c0e</msb:DisplayName>
		<msb:ProjectId>{B9687942-5EB7-4AB5-B2BF-A800C47B4D48}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_b508356f48b24bbb9ffc1880ecd66ff0.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="packages.config"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="6.0.4" targetFramework="net45" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Settings.get_Default():ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Sett" +
    "ings")]

namespace ST_f14e8c1995334e8881a105123d0b9c0e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f14e8c1995334e8881a105123d0b9c0e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_f14e8c1995334e8881a105123d0b9c0e")]
[assembly: AssemblyCopyright("Copyright @  2022")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_f14e8c1995334e8881a105123d0b9c0e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_b508356f48b24bbb9ffc1880ecd66ff0.dll">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
MwARAaIIOQAZARQFPgARASgJQgARAR0FSAAhAQgKTAARAdsJXABxAAkJaQAxAZIIbwA5AeUFdQAx
AWIGewB5AJYGfwARASgJhACJAHkHigBBASUKSAB5AKgGkQARASgJlgARAUgJpwChAHkHBgBJAXkH
EAChAPkIvQChANcIxABRAdAJygBhAXkHEAAUAG4B3gBpAXkH5ABRAVAG6gARAS8J8QBxAckF+ACh
AGUB/wAcAFoJEgGpAM0BFwGpAK4JGwGJAVMBIQEkAFoJEgGxAHkHEACRAV0CPgARAfUFPgCRAXIB
PgCZAQQDBgAxAXIJAQC5AHkHBgChAXkHQgGpAcQFSAG5AB8JTgGxAeUFVAG5AeUFWwGZABQFPgAM
AG4B3gDBAcYJSAAMAGsHYAEsAKIJEgEsAPAJFwGZAHkHBgDJASECbwHJARgKeAHpAHkHfgEJAXkH
BgAIACAAoQEIACQApgEpAHsAOgIuAAsAEgIuABMAGwIuABsAOgIuACMAQwIuACsAbAIuADMAbAIu
ADsAbAIuAEMAQwIuAEsAcgIuAFMAbAIuAFsAiQJDAGMApgFJAHsAOgJgAGsApgFjAHMApgGAAGsA
pgGgAGsApgHAAGsApgHBAGsApgHDAGsApgHgAGsApgEAAWsApgEbACYAUwBiAJ0ArgAxAQMAAQAE
AAMAAAAYBwMCAACtAggCAABSCQ0CAgAKAAMAAgALAAUAAQAMAAUAAgANAAcAIADVAAoBKgFpAQSA
AAABAAAAXSCTnQAAAAAAACoAAAAEAAAAAAAAAAAAAACGAS8BAAAAAA0AAAAAAAAAAAAAAI8BLAUA
AAAADQAAAAAAAAAAAAAAjwH8AAAAAAAEAAAAAAAAAAAAAACGASMBAAAAAAQAAAAAAAAAAAAAAJgB
5wYAAAAABAAAAAAAAAAAAAAAhgHuBQAAAAAEAAAAAAAAAAAAAACGAXUIAAAAAAAAAAABAAAAygcA
AAUAAgAGAAIAAAAAPD5jX19EaXNwbGF5Q2xhc3MzXzAAPE1haW4+Z19fcmVMaW5lfDNfMABTVF9i
NTA4MzU2ZjQ4YjI0YmJiOWZmYzE4ODBlY2Q2NmZmMAA8TWFpbj5nX19yZVN0cmluZ3wzXzEAVGFz
a2AxAEh0dHBIZWFkZXJWYWx1ZUNvbGxlY3Rpb25gMQBMaXN0YDEAPE1haW4+Z19faW5zZXJ0fDNf
MgA8TWFpbj5nX19jcmVhdGV8M18zADxNYWluPmdfX2xvYWREYXRhfDNfNAA8TWFpbj5nX19sb2Fk
RGF0YVRvVGFibGV8M181ADxNb2R1bGU+AFN5c3RlbS5JTwBNaWNyb3NvZnQuU3FsU2VydmVyLk1h
bmFnZWREVFMAdmFsdWVfXwBTeXN0ZW0uRGF0YQBtc2NvcmxpYgBTeXN0ZW0uQ29sbGVjdGlvbnMu
R2VuZXJpYwBSZWFkQXNTdHJpbmdBc3luYwBHZXRBc3luYwBBZGQAUmVhZFRvRW5kAERiQ29tbWFu
ZABTcWxDb21tYW5kAFNUX2YxNGU4YzE5OTUzMzRlODg4MWExMDUxMjNkMGI5YzBlAFJlcGxhY2UA
ZGVmYXVsdEluc3RhbmNlAGdldF9Jc1N1Y2Nlc3NTdGF0dXNDb2RlAEh0dHBSZXNwb25zZU1lc3Nh
Z2UARGF0YVRhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFu
ZGxlAHRhYmxlTmFtZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFJlYWRMaW5lAFZh
bHVlVHlwZQBTZWN1cml0eVByb3RvY29sVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNldF9DdWx0
dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UASW50ZXJuYWxE
YXRhQ29sbGVjdGlvbkJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UARGlzcG9zZQBFZGl0b3JC
cm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJD
b2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRl
AEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0
RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJs
eURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNz
ZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3Jp
cHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGlt
ZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAQXV0aGVudGljYXRpb25IZWFkZXJWYWx1ZQBNZWRpYVR5
cGVXaXRoUXVhbGl0eUhlYWRlclZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcA
VG9TdHJpbmcAZ2V0X0xlbmd0aABVcmkATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNrAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9kZWwA
U3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUX2I1MDgzNTZmNDhiMjRiYmI5ZmZjMTg4MGVjZDY2ZmYw
LmRsbABGaWxsAHNldF9TZWN1cml0eVByb3RvY29sAHVybABjbQBnZXRfSXRlbQBTeXN0ZW0AVHJp
bQBzcWxDb21tAEVudW0AcmVzb3VyY2VNYW4AU2NyaXB0TWFpbgBzcWxDb25uAFN5c3RlbS5Db25m
aWd1cmF0aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAHNldF9BdXRob3JpemF0aW9uAGdldF9UcmFu
c2FjdGlvbgBTeXN0ZW0uUmVmbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBBY3F1aXJlQ29ubmVj
dGlvbgBSZWxlYXNlQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBD
dWx0dXJlSW5mbwBTeXN0ZW0uTmV0Lkh0dHAAQ2hhcgBTdHJpbmdSZWFkZXIAVGV4dFJlYWRlcgBn
ZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAFNlcnZpY2VQb2ludE1hbmFnZXIA
RGJEYXRhQWRhcHRlcgBTcWxEYXRhQWRhcHRlcgBHZXRFbnVtZXJhdG9yAC5jdG9yAC5jY3RvcgBT
eXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0u
UmVzb3VyY2VzAFNUX2YxNGU4YzE5OTUzMzRlODg4MWExMDUxMjNkMGI5YzBlLlByb3BlcnRpZXMu
UmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9mMTRlOGMxOTk1MzM0ZTg4ODFh
MTA1MTIzZDBiOWMwZS5Qcm9wZXJ0aWVzAFNldHRpbmdzADw+NF9fdGhpcwBTeXN0ZW0uVGhyZWFk
aW5nLlRhc2tzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAGNvbHVtbnMAZ2V0X0Nvbm5lY3Rpb25zAGdl
dF9DaGFycwBTeXN0ZW0uTmV0Lkh0dHAuSGVhZGVycwBIdHRwUmVxdWVzdEhlYWRlcnMAZ2V0X0Rl
ZmF1bHRSZXF1ZXN0SGVhZGVycwBTdWNjZXNzAHNldF9CYXNlQWRkcmVzcwBnZXRfRHRzAFNjcmlw
dFJlc3VsdHMAZ2V0X1Jvd3MAQ29uY2F0AEZvcm1hdABPYmplY3QAU3lzdGVtLk5ldABTcGxpdABn
ZXRfRGVmYXVsdABnZXRfUmVzdWx0AERpYWxvZ1Jlc3VsdABzZXRfVGFza1Jlc3VsdABTeXN0ZW0u
RGF0YS5TcWxDbGllbnQASHR0cENsaWVudABnZXRfQ3VycmVudABnZXRfQ29udGVudABIdHRwQ29u
dGVudABnZXRfQ291bnQAZ2V0X0FjY2VwdABJbnNlcnQAZXJyTGlzdABpbnB1dABNb3ZlTmV4dABE
YXRhUm93AGVyclJvdwBTaG93AE1lc3NhZ2VCb3gAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVOb25RdWVy
eQBFbXB0eQAAAAEABQ0ADQAAAw0AAAUNAAoAAAUKAA0AAAUKAAoAAAMgAAAzTABpAG4AZQAtAGQA
bwB3AG4AIABwAHIAbwBjAGUAcwBzAGkAbgBnACAAZgBhAGkAbAABAycAAQVOACcAASlDAFQAUgBV
AE8ATgBHAC4ARABCAF8ARwBvAGMAXwBXAHIAaQBrAGUAABtJAG4AcwBlAHIAdAAgAGkAbgB0AG8A
IABbAAAVXQAgAFYAYQBsAHUAZQBzACAAKAAAAykAAAtTAHEAbAA6ACAAAAUgAAoAACMgAG4AdgBh
AHIAYwBoAGEAcgAoADQAMAAwADAAKQAsACAAAGlJAGYAIABuAG8AdAAgAGUAeABpAHMAdABzACAA
KABzAGUAbABlAGMAdAAgACoAIABmAHIAbwBtACAAcwB5AHMAbwBiAGoAZQBjAHQAcwAgAHcAaABl
AHIAZQAgAG4AYQBtAGUAPQAnAAE/JwAgAGEAbgBkACAAeAB0AHkAcABlAD0AJwBVACcAKQAgAEMA
UgBFAEEAVABFACAAVABBAEIATABFACAAWwABBV0AKAAAIWEAcABwAGwAaQBjAGEAdABpAG8AbgAv
AGoAcwBvAG4AAIKnZQB5AEoAMABkAEMASQA2AEkAbgBBAGkATABDAEoAaABiAEcAYwBpAE8AaQBK
AEkAVQB6AEkAMQBOAGkASQBzAEkAbgBSADIASQBqAG8AaQBNAFMASgA5AC4AZQB5AEoAawBJAGoA
bwBpAGUAMQB3AGkAWQBWAHcAaQBPAGoATQA1AE8AVABFAHkATgBUAFEAcwBYAEMASgBwAFgAQwBJ
ADYATwBEAEkAMQBPAFQATQB5AE4AeQB4AGMASQBtAE4AYwBJAGoAbwAwAE4AagBNAHoATQBqAGsA
NABMAEYAdwBpAGQAVgB3AGkATwBqAEUAeABPAEQAWQAyAE4AVABJADIATABGAHcAaQBjAGwAdwBp
AE8AbAB3AGkAVgBWAE4AYwBJAGkAeABjAEkAbgBOAGMASQBqAHAAYgBYAEMASgBYAFgAQwBJAHMA
WABDAEoARwBYAEMASQBzAFgAQwBKAEoAWABDAEkAcwBYAEMASgBWAFgAQwBJAHMAWABDAEoATABY
AEMASQBzAFgAQwBKAEQAWABDAEkAcwBYAEMASgBFAFgAQwBJAHMAWABDAEoATgBYAEMASQBzAFgA
QwBKAEIAWABDAEkAcwBYAEMASgBNAFgAQwBJAHMAWABDAEoAUQBYAEMASgBkAEwARgB3AGkAZQBs
AHcAaQBPAGwAdABkAEwARgB3AGkAZABGAHcAaQBPAGoAQgA5AEkAaQB3AGkAYQBXAEYAMABJAGoA
bwB4AE4AagBVADAATgB6AFEAegBOAGoATQAxAGYAUQAuAGIAMAAtAGwAdAAxAFgAUABlAHAAOQA3
ADUAcQBEAFMAcQBJAHoAZgB1ADMARQBhAGUAaQBVADEASwBtADkAWQBqAGoAQQBEAFMAMwBsADcA
SgBWAHcAAQ1CAGUAYQByAGUAcgAALVMAZQBsAGUAYwB0ACAAKgAgAGYAcgBvAG0AIABEAGEAdABh
AF8AVQBSAEwAAAc6ACAACgAAHUMAYQBjACAAZABvAG4AZwAgAGwAbwBpADoAIAAAL0wAbwBhAGQA
IAB0AGgAYQBuAGgAIABjAG8AbgBnACAAdABhAGIAbABlADoAIAAAI0MAcgBlAGEAdABlACAAdABh
AGIAbABlACAAZgBhAGkAbAAAcVMAVABfAGYAMQA0AGUAOABjADEAOQA5ADUAMwAzADQAZQA4ADgA
OAAxAGEAMQAwADUAMQAyADMAZAAwAGIAOQBjADAAZQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBS
AGUAcwBvAHUAcgBjAGUAcwAAAABVYj2A9Zm9QKNlH96x53/tAAQgAQEIAyAAAQUgAQEREQQgAQEO
BSABARF9BAcBERgFFRJhAQ4JBwcICA4DCAgDAgYOBSACDg4OBCABAwgDIAAOBQACDg4OAyAACAYA
ARGAlQ4IBwYICA4DCAgFIAIOCA4GBwMODhJBBSAAEoCZBSAAEoCdBSABEj0cAyAAHAQgARwcBQAB
Dh0OBiACAQ4SQQQgAQEcBgADDg4ODgkHBRJBDh0OCA4GIAEdDh0DDgcIDhJRDg4SVRJZDhJZBiAB
ARKApQUgABKAqQogABUSgK0BEoCxCBUSgK0BEoCxBSABARMABSACAQ4OBiABARKAtQYAAg4OHRwG
AAEBEYC9CiABFRKAwQESVQ4HFRKAwQESVQQgABMAAyAAAgUgABKAxQggABUSgMEBDgYVEoDBAQ4Q
BwgSXQ4SQQgODhURZQEODgUgAQESRQUgAQgSXQUgABKA2QYgARKA3QgEIAEcCAggABURZQETAAUV
EWUBDggAARKA5RGA6QUgABKA7QcgAgEOEoDtCLd6XFYZNOCJCImEXc2AgMyRCLA/X38R1Qo6BAAA
AAAEAQAAAAMGEj0DBhJBAwYSRQMGEnUDBhJ5AwYSEAIGCAMGERQDBhIIBgYVEmEBDgQAAQ4OCCAD
AQ4OEBEYBiABARARGAQAABJ1BAAAEnkFAAEBEnkEAAASEAMAAAEECAASdQQIABJ5BAgAEhAIAQAI
AAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUX2YxNGU4
YzE5OTUzMzRlODg4MWExMDUxMjNkMGI5YzBlAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMjIA
AEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUS
Lk5FVCBGcmFtZXdvcmsgNC41ALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNv
dXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQ
dWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJl
c291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAADMQgAAAAAAAAAAAADmQgAAACAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA2EIAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA
/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
GgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABAJOdXSAAAAEAk51dID8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIA
MAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBt
AGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8A
ZgAxADQAZQA4AGMAMQA5ADkANQAzADMANABlADgAOAA4ADEAYQAxADAANQAxADIAMwBkADAAYgA5
AGMAMABlAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgAMgA4ADUA
LgA0ADAAMwAzADkAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYgA1
ADAAOAAzADUANgBmADQAOABiADIANABiAGIAYgA5AGYAZgBjADEAOAA4ADAAZQBjAGQANgA2AGYA
ZgAwAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5
AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADIAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AFQAXwBiADUAMAA4ADMANQA2AGYANAA4AGIAMgA0AGIAYgBiADkAZgBmAGMAMQA4ADgAMABlAGMA
ZAA2ADYAZgBmADAALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBU
AF8AZgAxADQAZQA4AGMAMQA5ADkANQAzADMANABlADgAOAA4ADEAYQAxADAANQAxADIAMwBkADAA
YgA5AGMAMABlAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4
ADIAOAA1AC4ANAAwADMAMwA5AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgA4ADIAOAA1AC4ANAAwADMAMwA5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAPgyAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Creat and load data to table 1 1"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{0694b861-3ea7-42dc-8e17-b999f66a57e4}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Creat and load data to table 1 1"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_5c1cce892eb746e1b77c4699aaeff78f"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Package::Wrike_Url">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="ST_5c1cce892eb746e1b77c4699aaeff78f.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?><Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"><PropertyGroup><ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids><Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration><Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform><ProductVersion>8.0.30703</ProductVersion><SchemaVersion>2.0</SchemaVersion><ProjectGuid>{7D2DEF8A-8968-4FC2-AE63-9C326B235FEF}</ProjectGuid><OutputType>Library</OutputType><AppDesignerFolder>Properties</AppDesignerFolder><RootNamespace>ST_f14e8c1995334e8881a105123d0b9c0e</RootNamespace><AssemblyName>ST_5c1cce892eb746e1b77c4699aaeff78f</AssemblyName><TargetFrameworkVersion>v4.5</TargetFrameworkVersion><FileAlignment>512</FileAlignment><ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Debug' "><DebugSymbols>true</DebugSymbols><DebugType>full</DebugType><Optimize>false</Optimize><OutputPath>.\bin\Debug\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>DEBUG;TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><PropertyGroup Condition=" '$(Configuration)' == 'Release' "><DebugSymbols>false</DebugSymbols><Optimize>true</Optimize><OutputPath>.\bin\Release\</OutputPath><EnableUnmanagedDebugging>false</EnableUnmanagedDebugging><DefineConstants>TRACE</DefineConstants><ErrorReport>prompt</ErrorReport><WarningLevel>4</WarningLevel></PropertyGroup><ItemGroup><Reference Include="Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL"><HintPath>C:\Users\tranc\AppData\Local\Temp\Vsta\SSIS_ST130\VstaKyh_MEehikGrkauf_pgSrw\packages\Newtonsoft.Json.6.0.4\lib\net45\Newtonsoft.Json.dll</HintPath></Reference><Reference Include="System" /><Reference Include="System.Data" /><Reference Include="System.Net.Http" /><Reference Include="System.Net.Http.Formatting, Version=5.2.9.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL"><HintPath>C:\Users\tranc\AppData\Local\Temp\Vsta\SSIS_ST130\VstaKyh_MEehikGrkauf_pgSrw\packages\Microsoft.AspNet.WebApi.Client.5.2.9\lib\net45\System.Net.Http.Formatting.dll</HintPath></Reference><Reference Include="System.Net.Http.WebRequest" /><Reference Include="System.Web.Extensions" /><Reference Include="System.Windows.Forms" /><Reference Include="System.Xml" /><Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /><Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" /></ItemGroup><ItemGroup><AppDesigner Include="Properties\" /><Compile Include="Properties\AssemblyInfo.cs"><SubType>Code</SubType></Compile><EmbeddedResource Include="Properties\Resources.resx"><Generator>ResXFileCodeGenerator</Generator><LastGenOutput>Resources.Designer.cs</LastGenOutput></EmbeddedResource><Compile Include="Properties\Resources.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Resources.resx</DependentUpon></Compile><None Include="packages.config" /><None Include="Properties\Settings.settings"><Generator>SettingsSingleFileGenerator</Generator><LastGenOutput>Settings.Designer.cs</LastGenOutput></None><Compile Include="Properties\Settings.Designer.cs"><AutoGen>True</AutoGen><DependentUpon>Settings.settings</DependentUpon></Compile><Compile Include="ScriptMain.cs"><SubType>Code</SubType></Compile></ItemGroup><!-- Include the build rules for a C# project.--><Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" /><ProjectExtensions><VisualStudio><FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}"><ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" /><Host Name="ScriptTask" /><ProjectClient><HostIdentifier>SSIS_ST130</HostIdentifier></ProjectClient></FlavorProperties></VisualStudio></ProjectExtensions></Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="6.0.4" targetFramework="net45" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Data.OleDb;
using System.Net;
using System.Text;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
#endregion

namespace ST_f14e8c1995334e8881a105123d0b9c0e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion
        ConnectionManager cm;
        System.Data.SqlClient.SqlConnection sqlConn;
        System.Data.SqlClient.SqlCommand sqlComm;


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {

            List<string> errList = new List<string>();
            string errRow = "";

            string reLine(string input)
            {
                int flat = 0;
                int check = 0;

                input = input.Replace("\r\r", string.Empty);
                input = input.Replace("\r", string.Empty);
                input = input.Replace("\r\n", string.Empty);
                input = input.Replace("\n\r", string.Empty);
                input = input.Replace("\n\n", string.Empty);

                string result = "";
                char a = '"';
                try
                {

                    for (int i = 0; i < input.Length; i++)
                    {
                        if (input[i] == '\n')
                        {
                            check = 0;
                            for (int j = i; j > flat; j--)
                            {
                                if (input[j] ==a)
                                {
                                    check += 1;
                                }
                            }
                            if(check %2 == 0)
                            {
                                result += input[i];
                                flat = i;
                            }
                        }
                        else
                        {
                            result += input[i];
                        }
                    }
                }
                catch
                {
                    MessageBox.Show("Line-down processing fail");
                }
                return result;
            }

            string reString(string input)
            {
                //MessageBox.Show("input: " + input);
                int flat = 0;
                int check = 0;
                string result = input;

                result = result.Replace("'", string.Empty);
                result = "'" + result;

                char a = '"';

                for ( int i =1; i< result.Length; i++)
                {
                     if (i == result.Length - 1 && result[i] == ',')
                    {
                        result = result.Insert(result.Length - 1, "'");
                        result = result + "'";
                        break;
                    }
                    else if (result[i] == ',' && i < result.Length -1)
                    {
                        check = 0;
                        for (int j =i; j>=flat;j--)
                            {
                                if (result[j] == a)
                                    check += 1;
                            }
                        if(check % 2 ==0)
                            {
                                flat = i+1;
                                result = result.Insert(i, "'");
                                result = result.Insert(i + 2, "'");
                                i += 2;
                            }
                    }
                }
                result = result.Replace(a.ToString(), string.Empty) + "'";
                //MessageBox.Show("reslut: " + result);
                return result ;
            }
            void insert(string tableName, string columns)
            {
                string sql = "";
                string cl = reString(columns);
                try
                {
                    // Tạo chuỗi kết nối
                    SqlConnection myADONETConnection =
                        Dts.Connections["CTRUONG.DB_Goc_Wrike"].AcquireConnection(Dts.Transaction) as SqlConnection;
                    //MessageBox.Show(myADONETConnection.ConnectionString, "ADO.NET Connection");

                    // Xử lý row
                    sql = "Insert into ["
                        + tableName + "] Values ("
                        + cl + ")";
                    //MessageBox.Show("sql: " + sql);

                    // thực thi sql command 
                    SqlCommand command;
                    command = new SqlCommand(sql, myADONETConnection);
                    command.ExecuteNonQuery();

                    // reset conn
                    Dts.Connections["CTRUONG.DB_Goc_Wrike"].ReleaseConnection(myADONETConnection);
                }
                catch
                {
                    //MessageBox.Show("Insert fail");
                    MessageBox.Show("Sql: " + sql);
                    errRow += cl + " \n";

                }
            }

            void create(string tableName, string columns)
            {
                string sql = "";
                try
                {
                    // Tạo chuỗi kết nối
                    SqlConnection myADONETConnection =
                        Dts.Connections["CTRUONG.DB_Goc_Wrike"].AcquireConnection(Dts.Transaction) as SqlConnection;
                    //MessageBox.Show(myADONETConnection.ConnectionString, "ADO.NET Connection");

                    string cl = "";
                    string[] c = columns.Split(',');
                    foreach (string item in c)
                    {
                        cl = cl + item + " nvarchar(max)" + ", ";
                    }
                    sql = "If not exists (select * from sysobjects where name='"
                        + tableName + "' and xtype='U') CREATE TABLE ["
                        + tableName + "]("
                        + cl + ")";
                   // MessageBox.Show("sql: " + sql);

                    // thực thi sql command 
                    SqlCommand command;
                    command = new SqlCommand(sql, myADONETConnection);
                    command.ExecuteNonQuery();

                    // reset conn
                    Dts.Connections["CTRUONG.DB_Goc_Wrike"].ReleaseConnection(myADONETConnection);
                }
                catch
                {
                    //MessageBox.Show("Create fail");
                    //MessageBox.Show("Sql: " + sql);
                }
            }

            void loadData(string tableName, string url)
            {
                try
                {
                    // Khởi tạo apl call

                    // Truyền url
                    string wrikeUrl = url;
                    HttpClient client = new HttpClient();
                    client.BaseAddress = new Uri(wrikeUrl);

                    // Truyền token, khai báo authorization type
                    client.DefaultRequestHeaders.Accept.Add(
                    new MediaTypeWithQualityHeaderValue("application/json"));
                    string accesstoken = "eyJ0dCI6InAiLCJhbGciOiJIUzI1NiIsInR2IjoiMSJ9.eyJkIjoie1wiYVwiOjM5OTEyNTQsXCJpXCI6ODI1OTMyNyxcImNcIjo0NjMzMjk4LFwidVwiOjExODY2NTI2LFwiclwiOlwiVVNcIixcInNcIjpbXCJXXCIsXCJGXCIsXCJJXCIsXCJVXCIsXCJLXCIsXCJDXCIsXCJEXCIsXCJNXCIsXCJBXCIsXCJMXCIsXCJQXCJdLFwielwiOltdLFwidFwiOjB9IiwiaWF0IjoxNjU0NzQzNjM1fQ.b0-lt1XPep975qDSqIzfu3EaeiU1Km9YjjADS3l7JVw";
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accesstoken);

                    // Tạo url chứa data
                    string APIUrl = string.Format(wrikeUrl);
                    ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                    // Lưu kết quả
                    var response = client.GetAsync(APIUrl).Result;


                    if (response.IsSuccessStatusCode)
                    {
                        // Lấy giá trị của kết quả trả về
                        var result = response.Content.ReadAsStringAsync().Result;
                        //MessageBox.Show("reslut: " + result);


                        using (StringReader reader = new StringReader(result))
                        {
                            string lines = reader.ReadLine();
                            create(tableName, lines.Trim());

                            string data = reLine(reader.ReadToEnd());

                            using(StringReader readata = new StringReader(data))
                            {
                                while ((lines = readata.ReadLine()) != null)
                                {
                                    insert(tableName, lines);
                                }
                            }
                        }

                        Dts.TaskResult = (int)ScriptResults.Success;
                    }
                    else
                    {
                        Dts.TaskResult = (int)ScriptResults.Failure;
                       // MessageBox.Show("Load fail");
                    }
                }
                catch
                {
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }
            }
            void loadDataToTable()
            {
                DataTable dataTable = new DataTable();
                //string tableName = "";
                //string url = "";

                string tableName = "test";
                string url = "https://storage.www.wrike.com/data_export/resource/319921136?accountId=3991254";
                loadData(tableName, url);
                errList.Add(errRow);

                string sql = "";
                try
                {
                    // Tạo chuỗi kết nối
                    SqlConnection myADONETConnection =
                        Dts.Connections["CTRUONG.DB_Goc_Wrike"].AcquireConnection(Dts.Transaction) as SqlConnection;
                    sql = "Select * from Data_URL";
                    // MessageBox.Show("sql: " + sql);

                    // thực thi sql command 
                    SqlCommand command;
                    command = new SqlCommand(sql, myADONETConnection);
                    SqlDataAdapter da = new SqlDataAdapter(command);
                    // this will query your database and return the result to your datatable
                    da.Fill(dataTable);

                    //dataTable.Rows.Count - 1
                   /* for (int i = 0; i < dataTable.Rows.Count; i++) {

                        string tableName = dataTable.Rows[i][0].ToString().Trim();
                        string url = dataTable.Rows[i][1].ToString().Trim();

                        errRow = tableName+": \n";
                        //MessageBox.Show("bat dau load table: " + tableName + "url: "+ url);
                        loadData(tableName, url);
                        //MessageBox.Show("load thanh cong table: " + tableName);
                        errList.Add(errRow); 
                    } */
                    foreach(string item in errList) {
                        MessageBox.Show("Cac dong loi: " + item); }
                    MessageBox.Show("Load thanh cong table: ");
                    // reset conn
                    Dts.Connections["CTRUONG.DB_Goc_Wrike"].ReleaseConnection(myADONETConnection);
                }
                catch
                {
                    MessageBox.Show("Create table fail");
                    MessageBox.Show("Sql: " + sql);
                }
            }
            loadDataToTable();
        }
   #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_f14e8c1995334e8881a105123d0b9c0e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_f14e8c1995334e8881a105123d0b9c0e</msb:DisplayName>
		<msb:ProjectId>{B9687942-5EB7-4AB5-B2BF-A800C47B4D48}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_5c1cce892eb746e1b77c4699aaeff78f.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="packages.config"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Settings.get_Default():ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Sett" +
    "ings")]

namespace ST_f14e8c1995334e8881a105123d0b9c0e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f14e8c1995334e8881a105123d0b9c0e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_f14e8c1995334e8881a105123d0b9c0e")]
[assembly: AssemblyCopyright("Copyright @  2022")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_f14e8c1995334e8881a105123d0b9c0e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_b508356f48b24bbb9ffc1880ecd66ff0.dll">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
BgAGA2wHBgAACdMFFgBhCboGFgDlAboGBgDPBvIAEgD5ASMBBgCHADgBYwBBBwAABgDnBdMFBgBm
AtMFBgAhA1kHBgDrBowHBgCuBiAGGgDxAmsFGgBSA2sFGgDRAgsGBgD7BNMFBgDKBtMFHgDFCUgI
HgAvCUgICgBZBTAFDgBpCD0CEgB8AZsGGgANBdMFFgCXCH8IFgBrAH8IFgC5BH8IFgCfBH8IGgAN
BwcJGgBwAgcJBgBkADEIFgCECboGBgDcBvIABgADAtMFEgAvB0sJEgAhB5sGBgCAAtMFBgAPAtMF
BgDUCVcGAAAAAOkAAAAAAAEAAQABABAA+AWRATkAAQABAAAAEACTB+8HTQAEAAkAAAEQAB4I7weF
AAYADQADAQAA5AgAAGkABwAQAAMBEAABAAAAbQAKABAAAQDHBZgBAQADBpwBAQDfBaABEQDsBaQB
EQClAqgBEQC9AawBBgYbAbABVoDECLMBVoCFArMBBgAnCLcBBgC5CTAABgCiCbsBUCAAAAAAhgD+
BQYAAQCFIAAAAACGGEwHBgABAJAgAAAAAJMAFgDCAQEApCEAAAAAkwBOAMIBAgC0IgAAAACBAI4A
xwEDAIwjAAAAAIEAogDHAQUAcCQAAAAAgQC2AMcBBwDoJQAAAACBAMwA0AEJABQnAAAAAIMYTAcG
AAkAHCcAAAAAkwjnBtcBCQBIJwAAAACTCI0C3AEJAE8nAAAAAJMImQLhAQkAVycAAAAAlggYCecB
CgBeJwAAAACGGEwHBgAKAGYnAAAAAJEYUgfsAQoAAAABAKoJAAABAKoJAAABADMCAAACAF0IAAAB
ADMCAAACAF0IAAABADMCAAACAMMFAAABANkECQBMBwEAEQBMBwYAGQBMBwoAKQBMBxAAMQBMBxAA
OQBMBxAAQQBMBxAASQBMBxAAUQBMBxAAWQBMBxAAYQBMBxAAaQBMBwYAkQBMBwYA4QBMBwYAAQFM
BxUADABMBwYAcQBMBwYAEQHtCTAAEQG1ATMAEQF1CDkAGQH5BD4AEQHyCEIAEQECBUgAIQHACUwA
EQGbCVwAcQDcCGkAMQFlCG8AOQHKBXUAMQFHBnsAeQBpBn8AEQHyCIQAiQBMB4oAQQHdCUgAeQB7
BpEAEQHyCJYAEQESCacAoQBMBwYASQFMBxAAoQDMCL0AoQCqCMQAUQGQCcoAYQFMBxAAFABuAd4A
aQFMB+QAUQE1BuoAEQH5CPEAcQGuBfgAoQBlAf8AHAAkCRIBqQDNARcBqQB4CRsBiQFTASEBJAAk
CRIBsQBMBxAAkQFdAj4AEQHaBT4AkQFyAT4AmQHpAgYAMQE8CQEAuQBMBwYADABuAd4AoQFMB0EB
qQGpBUcBDAA+B00BLABsCRIBLACwCRcBmQBMBwYAsQEhAlwBsQHQCWUB6QBMB2sBCQFMBwYACAAg
AI4BCAAkAJMBKQB7ACcCLgALAP8BLgATAAgCLgAbACcCLgAjADACLgArAFkCLgAzAFkCLgA7AFkC
LgBDADACLgBLAF8CLgBTAFkCLgBbAHYCQwBjAJMBSQB7ACcCYABrAJMBYwBzAJMBgABrAJMBoABr
AJMBwABrAJMBwQBrAJMBwwBrAJMB4ABrAJMBAAFrAJMBGwAmAFMAYgCdAK4AMQEDAAEABAADAAAA
6wbwAQAArQL1AQAAHAn6AQIACgADAAIACwAFAAEADAAFAAIADQAHACAA1QAKASoBVgEEgAAAAQAA
AFQg/kgAAAAAAAAqAAAABAAAAAAAAAAAAAAAcwEvAQAAAAANAAAAAAAAAAAAAAB8AREFAAAAAA0A
AAAAAAAAAAAAAHwB/AAAAAAABAAAAAAAAAAAAAAAcwEjAQAAAAAEAAAAAAAAAAAAAACFAboGAAAA
AAQAAAAAAAAAAAAAAHMB0wUAAAAABAAAAAAAAAAAAAAAcwFICAAAAAAAAAAAAQAAAJ0HAAAFAAIA
BgACAAAAADw+Y19fRGlzcGxheUNsYXNzM18wADxNYWluPmdfX3JlTGluZXwzXzAAU1RfYjUwODM1
NmY0OGIyNGJiYjlmZmMxODgwZWNkNjZmZjAAPE1haW4+Z19fcmVTdHJpbmd8M18xAFRhc2tgMQBI
dHRwSGVhZGVyVmFsdWVDb2xsZWN0aW9uYDEATGlzdGAxADxNYWluPmdfX2luc2VydHwzXzIAPE1h
aW4+Z19fY3JlYXRlfDNfMwA8TWFpbj5nX19sb2FkRGF0YXwzXzQAPE1haW4+Z19fbG9hZERhdGFU
b1RhYmxlfDNfNQA8TW9kdWxlPgBTeXN0ZW0uSU8ATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2Vk
RFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAbXNjb3JsaWIAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVy
aWMAUmVhZEFzU3RyaW5nQXN5bmMAR2V0QXN5bmMAQWRkAFJlYWRUb0VuZABEYkNvbW1hbmQAU3Fs
Q29tbWFuZABTVF9mMTRlOGMxOTk1MzM0ZTg4ODFhMTA1MTIzZDBiOWMwZQBSZXBsYWNlAGRlZmF1
bHRJbnN0YW5jZQBnZXRfSXNTdWNjZXNzU3RhdHVzQ29kZQBIdHRwUmVzcG9uc2VNZXNzYWdlAERh
dGFUYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQB0
YWJsZU5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBSZWFkTGluZQBWYWx1ZVR5
cGUAU2VjdXJpdHlQcm90b2NvbFR5cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBy
ZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9uU2V0
dGluZ3NCYXNlAERpc3Bvc2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRB
dHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRl
AEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5
VHJhZGVtYXJrQXR0cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZp
Z3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlv
blJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNv
cHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1i
bHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAEF1dGhlbnRp
Y2F0aW9uSGVhZGVyVmFsdWUATWVkaWFUeXBlV2l0aFF1YWxpdHlIZWFkZXJWYWx1ZQB2YWx1ZQBT
eXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAGdldF9MZW5ndGgAVXJpAE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3Jp
cHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF9iNTA4MzU2
ZjQ4YjI0YmJiOWZmYzE4ODBlY2Q2NmZmMC5kbGwARmlsbABzZXRfU2VjdXJpdHlQcm90b2NvbAB1
cmwAY20AZ2V0X0l0ZW0AU3lzdGVtAFRyaW0Ac3FsQ29tbQBFbnVtAHJlc291cmNlTWFuAFNjcmlw
dE1haW4Ac3FsQ29ubgBTeXN0ZW0uQ29uZmlndXJhdGlvbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBz
ZXRfQXV0aG9yaXphdGlvbgBnZXRfVHJhbnNhY3Rpb24AU3lzdGVtLlJlZmxlY3Rpb24AQWNxdWly
ZUNvbm5lY3Rpb24AUmVsZWFzZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBTeXN0ZW0uRGF0YS5D
b21tb24AQ3VsdHVyZUluZm8AU3lzdGVtLk5ldC5IdHRwAENoYXIAU3RyaW5nUmVhZGVyAFRleHRS
ZWFkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcgBTZXJ2aWNlUG9pbnRN
YW5hZ2VyAERiRGF0YUFkYXB0ZXIAU3FsRGF0YUFkYXB0ZXIAR2V0RW51bWVyYXRvcgAuY3RvcgAu
Y2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMA
U3lzdGVtLlJlc291cmNlcwBTVF9mMTRlOGMxOTk1MzM0ZTg4ODFhMTA1MTIzZDBiOWMwZS5Qcm9w
ZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfZjE0ZThjMTk5NTMz
NGU4ODgxYTEwNTEyM2QwYjljMGUuUHJvcGVydGllcwBTZXR0aW5ncwA8PjRfX3RoaXMAU3lzdGVt
LlRocmVhZGluZy5UYXNrcwBTeXN0ZW0uV2luZG93cy5Gb3JtcwBjb2x1bW5zAGdldF9Db25uZWN0
aW9ucwBnZXRfQ2hhcnMAU3lzdGVtLk5ldC5IdHRwLkhlYWRlcnMASHR0cFJlcXVlc3RIZWFkZXJz
AGdldF9EZWZhdWx0UmVxdWVzdEhlYWRlcnMAU3VjY2VzcwBzZXRfQmFzZUFkZHJlc3MAZ2V0X0R0
cwBTY3JpcHRSZXN1bHRzAENvbmNhdABGb3JtYXQAT2JqZWN0AFN5c3RlbS5OZXQAU3BsaXQAZ2V0
X0RlZmF1bHQAZ2V0X1Jlc3VsdABEaWFsb2dSZXN1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRh
dGEuU3FsQ2xpZW50AEh0dHBDbGllbnQAZ2V0X0N1cnJlbnQAZ2V0X0NvbnRlbnQASHR0cENvbnRl
bnQAZ2V0X0FjY2VwdABJbnNlcnQAZXJyTGlzdABpbnB1dABNb3ZlTmV4dABlcnJSb3cAU2hvdwBN
ZXNzYWdlQm94AGdldF9Bc3NlbWJseQBFeGVjdXRlTm9uUXVlcnkARW1wdHkAAAABAAUNAA0AAAMN
AAAFDQAKAAAFCgANAAAFCgAKAAAzTABpAG4AZQAtAGQAbwB3AG4AIABwAHIAbwBjAGUAcwBzAGkA
bgBnACAAZgBhAGkAbAABAycAASlDAFQAUgBVAE8ATgBHAC4ARABCAF8ARwBvAGMAXwBXAHIAaQBr
AGUAABtJAG4AcwBlAHIAdAAgAGkAbgB0AG8AIABbAAAVXQAgAFYAYQBsAHUAZQBzACAAKAAAAykA
AAtTAHEAbAA6ACAAAAUgAAoAACEgAG4AdgBhAHIAYwBoAGEAcgAoAG0AYQB4ACkALAAgAABpSQBm
ACAAbgBvAHQAIABlAHgAaQBzAHQAcwAgACgAcwBlAGwAZQBjAHQAIAAqACAAZgByAG8AbQAgAHMA
eQBzAG8AYgBqAGUAYwB0AHMAIAB3AGgAZQByAGUAIABuAGEAbQBlAD0AJwABPycAIABhAG4AZAAg
AHgAdAB5AHAAZQA9ACcAVQAnACkAIABDAFIARQBBAFQARQAgAFQAQQBCAEwARQAgAFsAAQVdACgA
ACFhAHAAcABsAGkAYwBhAHQAaQBvAG4ALwBqAHMAbwBuAACCp2UAeQBKADAAZABDAEkANgBJAG4A
QQBpAEwAQwBKAGgAYgBHAGMAaQBPAGkASgBJAFUAegBJADEATgBpAEkAcwBJAG4AUgAyAEkAagBv
AGkATQBTAEoAOQAuAGUAeQBKAGsASQBqAG8AaQBlADEAdwBpAFkAVgB3AGkATwBqAE0ANQBPAFQA
RQB5AE4AVABRAHMAWABDAEoAcABYAEMASQA2AE8ARABJADEATwBUAE0AeQBOAHkAeABjAEkAbQBO
AGMASQBqAG8AMABOAGoATQB6AE0AagBrADQATABGAHcAaQBkAFYAdwBpAE8AagBFAHgATwBEAFkA
MgBOAFQASQAyAEwARgB3AGkAYwBsAHcAaQBPAGwAdwBpAFYAVgBOAGMASQBpAHgAYwBJAG4ATgBj
AEkAagBwAGIAWABDAEoAWABYAEMASQBzAFgAQwBKAEcAWABDAEkAcwBYAEMASgBKAFgAQwBJAHMA
WABDAEoAVgBYAEMASQBzAFgAQwBKAEwAWABDAEkAcwBYAEMASgBEAFgAQwBJAHMAWABDAEoARQBY
AEMASQBzAFgAQwBKAE4AWABDAEkAcwBYAEMASgBCAFgAQwBJAHMAWABDAEoATQBYAEMASQBzAFgA
QwBKAFEAWABDAEoAZABMAEYAdwBpAGUAbAB3AGkATwBsAHQAZABMAEYAdwBpAGQARgB3AGkATwBq
AEIAOQBJAGkAdwBpAGEAVwBGADAASQBqAG8AeABOAGoAVQAwAE4AegBRAHoATgBqAE0AMQBmAFEA
LgBiADAALQBsAHQAMQBYAFAAZQBwADkANwA1AHEARABTAHEASQB6AGYAdQAzAEUAYQBlAGkAVQAx
AEsAbQA5AFkAagBqAEEARABTADMAbAA3AEoAVgB3AAENQgBlAGEAcgBlAHIAAAl0AGUAcwB0AACA
nWgAdAB0AHAAcwA6AC8ALwBzAHQAbwByAGEAZwBlAC4AdwB3AHcALgB3AHIAaQBrAGUALgBjAG8A
bQAvAGQAYQB0AGEAXwBlAHgAcABvAHIAdAAvAHIAZQBzAG8AdQByAGMAZQAvADMAMQA5ADkAMgAx
ADEAMwA2AD8AYQBjAGMAbwB1AG4AdABJAGQAPQAzADkAOQAxADIANQA0AAAtUwBlAGwAZQBjAHQA
IAAqACAAZgByAG8AbQAgAEQAYQB0AGEAXwBVAFIATAAAHUMAYQBjACAAZABvAG4AZwAgAGwAbwBp
ADoAIAAAL0wAbwBhAGQAIAB0AGgAYQBuAGgAIABjAG8AbgBnACAAdABhAGIAbABlADoAIAAAI0MA
cgBlAGEAdABlACAAdABhAGIAbABlACAAZgBhAGkAbAAAcVMAVABfAGYAMQA0AGUAOABjADEAOQA5
ADUAMwAzADQAZQA4ADgAOAAxAGEAMQAwADUAMQAyADMAZAAwAGIAOQBjADAAZQAuAFAAcgBvAHAA
ZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAHiOs0otBEhLl9tyyecnh88ABCABAQgD
IAABBSABARERBCABAQ4FIAEBEX0EBwERGAUVEmEBDgkHBwgIDgMICAMCBg4FIAIODg4EIAEDCAMg
AA4FAAIODg4DIAAIBgABEYCVDggHBggIDgMICAUgAg4IDgYHAw4OEkEFIAASgJkFIAASgJ0FIAES
PRwDIAAcBCABHBwFAAEOHQ4GIAIBDhJBBCABARwGAAMODg4OCQcFEkEOHQ4IDgYgAR0OHQMOBwgO
ElEODhJVElkOElkGIAEBEoClBSAAEoCpCiAAFRKArQESgLEIFRKArQESgLEFIAEBEwAFIAIBDg4G
IAEBEoC1BgACDg4dHAYAAQERgL0KIAEVEoDBARJVDgcVEoDBARJVBCAAEwADIAACBSAAEoDFCCAA
FRKAwQEOBhUSgMEBDg8HBxJdDg4OEkEVEWUBDg4FIAEBEkUFIAEIEl0IIAAVEWUBEwAFFRFlAQ4I
AAESgNkRgN0FIAASgOEHIAIBDhKA4Qi3elxWGTTgiQiJhF3NgIDMkQiwP19/EdUKOgQAAAAABAEA
AAADBhI9AwYSQQMGEkUDBhJ1AwYSeQMGEhACBggDBhEUAwYSCAYGFRJhAQ4EAAEODgggAwEODhAR
GAYgAQEQERgEAAASdQQAABJ5BQABARJ5BAAAEhADAAABBAgAEnUECAASeQQIABIQCAEACAAAAAAA
HgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF9mMTRlOGMxOTk1
MzM0ZTg4ODFhMTA1MTIzZDBiOWMwZQAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIyAABJAQAa
Lk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQg
RnJhbWV3b3JrIDQuNbQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJl
YWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNL
ZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNl
U2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABUQgAAAAAAAAAAAABuQgAAACAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAYEIAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQ
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAA
ABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAA
GgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4A
AAEAAAABAP5IVCAAAAEA/khUID8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEA
cgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACw
BHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0AGIA
MAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBt
AGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBUAF8A
ZgAxADQAZQA4AGMAMQA5ADkANQAzADMANABlADgAOAA4ADEAYQAxADAANQAxADIAMwBkADAAYgA5
AGMAMABlAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgAMgA3ADYA
LgAxADgANgA4ADYAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8AYgA1
ADAAOAAzADUANgBmADQAOABiADIANABiAGIAYgA5AGYAZgBjADEAOAA4ADAAZQBjAGQANgA2AGYA
ZgAwAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5
AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADIAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0A
YQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABT
AFQAXwBiADUAMAA4ADMANQA2AGYANAA4AGIAMgA0AGIAYgBiADkAZgBmAGMAMQA4ADgAMABlAGMA
ZAA2ADYAZgBmADAALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBU
AF8AZgAxADQAZQA4AGMAMQA5ADkANQAzADMANABlADgAOAA4ADEAYQAxADAANQAxADIAMwBkADAA
YgA5AGMAMABlAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4
ADIANwA2AC4AMQA4ADYAOAA2AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkA
bwBuAAAAMQAuADAALgA4ADIANwA2AC4AMQA4ADYAOAA2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAIAyAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Load Data_URL"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:Disabled="True"
      DTS:DTSID="{8BC25C27-E5A7-4684-8450-6F9ED17025CA}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Load Data_URL"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_f14e8c1995334e8881a105123d0b9c0e"
          VSTAMajorVersion="14"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="$Package::Wrike_Url">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_f14e8c1995334e8881a105123d0b9c0e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_f14e8c1995334e8881a105123d0b9c0e")]
[assembly: AssemblyCopyright("Copyright @  2022")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Newtonsoft.Json" version="6.0.4" targetFramework="net45" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Data.OleDb;
using System.Net;
using System.Text;
using Newtonsoft.Json;
using System.Web.Script.Serialization;
using System.Collections.Generic;
using Newtonsoft.Json.Linq;
using System.Data.SqlClient;
#endregion

namespace ST_f14e8c1995334e8881a105123d0b9c0e
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion
        ConnectionManager cm;
        System.Data.SqlClient.SqlConnection sqlConn;
        System.Data.SqlClient.SqlCommand sqlComm;


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            void insert(string name, string url)
            {
                try
                {
                    // Tạo chuỗi kết nối
                    SqlConnection myADONETConnection =
                        Dts.Connections["CTRUONG.DB_Goc_Wrike"].AcquireConnection(Dts.Transaction) as SqlConnection;
                    //MessageBox.Show(myADONETConnection.ConnectionString, "ADO.NET Connection");

                    // thực thi sql command 
                    using (var sqlCmd = new SqlCommand("Insert into Data_URL(name, url) " +
                        "values(@name, @url)", myADONETConnection))
                    {
                        sqlCmd.CommandType = CommandType.Text;
                        sqlCmd.Parameters.AddWithValue("@name", name);
                        sqlCmd.Parameters.AddWithValue("@url", url);

                        int rowsAffected = sqlCmd.ExecuteNonQuery();
                       // MessageBox.Show("so dong them: " + rowsAffected);
                    }

                    using (var sqlCmd = new SqlCommand("Delete from Data_URL where name in ('audit_log','work_comment_content'," +
                        "'work_custom_field_history','work_description','work_timelog_comment')", myADONETConnection))
                    {

                        int rowsAffected = sqlCmd.ExecuteNonQuery();
                        // MessageBox.Show("so dong them: " + rowsAffected);
                    }

                    // reset conn
                    Dts.Connections["CTRUONG.DB_Goc_Wrike"].ReleaseConnection(myADONETConnection);
                }
                catch {
                    MessageBox.Show("Connect fail");
                }
            }
            try
            { 
                // Khởi tạo apl call

                // Truyền url
                string wrikeUrl = (string)Dts.Variables["Wrike_Url"].Value;
                HttpClient client = new HttpClient();
                client.BaseAddress = new Uri(wrikeUrl);

                // Truyền token, khai báo authorization type
                client.DefaultRequestHeaders.Accept.Add(
                new MediaTypeWithQualityHeaderValue("application/json"));
                string accesstoken = "eyJ0dCI6InAiLCJhbGciOiJIUzI1NiIsInR2IjoiMSJ9.eyJkIjoie1wiYVwiOjM5OTEyNTQsXCJpXCI6ODI1OTMyNyxcImNcIjo0NjMzMjk4LFwidVwiOjExODY2NTI2LFwiclwiOlwiVVNcIixcInNcIjpbXCJXXCIsXCJGXCIsXCJJXCIsXCJVXCIsXCJLXCIsXCJDXCIsXCJEXCIsXCJNXCIsXCJBXCIsXCJMXCIsXCJQXCJdLFwielwiOltdLFwidFwiOjB9IiwiaWF0IjoxNjU0NzQzNjM1fQ.b0-lt1XPep975qDSqIzfu3EaeiU1Km9YjjADS3l7JVw";
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accesstoken);

                // Tạo url chứa data
                string APIUrl = string.Format(wrikeUrl + "/data_export");
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                // Lưu kết quả
                var response = client.GetAsync(APIUrl).Result;


                if (response.IsSuccessStatusCode)
                {
                    // Lấy giá trị của kết quả trả về
                    var result = response.Content.ReadAsStringAsync().Result;

                    // Chuyển kết quả thành Json
                    JObject jsondata = JObject.Parse(result);

                    // Trỏ đến value
                    var listTable = jsondata["data"][0]["resources"];

                    string name = "";
                    string url = "";
                    foreach (var item in listTable )
                    {
                        name = item["name"].ToString();
                        url = item["url"].ToString();
                       // MessageBox.Show(name + " - " + url);
                        insert(name, url);
                        Console.WriteLine("name: " + name + " - url: " + url);
         
                    }



                    Dts.TaskResult = (int)ScriptResults.Success;
                }
                else
                {
                    Dts.TaskResult = (int)ScriptResults.Failure;
                    MessageBox.Show("Insert fail");
                }
            }
           
            catch
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                MessageBox.Show("Load data fail");
            }
		}



        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_f14e8c1995334e8881a105123d0b9c0e.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{7D2DEF8A-8968-4FC2-AE63-9C326B235FEF}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_f14e8c1995334e8881a105123d0b9c0e</RootNamespace>
    <AssemblyName>ST_f14e8c1995334e8881a105123d0b9c0e</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Newtonsoft.Json, Version=6.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed, processorArchitecture=MSIL">
      <HintPath>C:\Users\tranc\AppData\Local\Temp\Vsta\SSIS_ST130\VstaKyh_MEehikGrkauf_pgSrw\packages\Newtonsoft.Json.6.0.4\lib\net45\Newtonsoft.Json.dll</HintPath>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Net.Http" />
    <Reference Include="System.Net.Http.Formatting, Version=5.2.9.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, processorArchitecture=MSIL">
      <HintPath>C:\Users\tranc\AppData\Local\Temp\Vsta\SSIS_ST130\VstaKyh_MEehikGrkauf_pgSrw\packages\Microsoft.AspNet.WebApi.Client.5.2.9\lib\net45\System.Net.Http.Formatting.dll</HintPath>
    </Reference>
    <Reference Include="System.Net.Http.WebRequest" />
    <Reference Include="System.Web.Extensions" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=13.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_f14e8c1995334e8881a105123d0b9c0e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_f14e8c1995334e8881a105123d0b9c0e</msb:DisplayName>
		<msb:ProjectId>{B9687942-5EB7-4AB5-B2BF-A800C47B4D48}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_f14e8c1995334e8881a105123d0b9c0e.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="packages.config"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Settings.get_Default():ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Sett" +
    "ings")]

namespace ST_f14e8c1995334e8881a105123d0b9c0e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_f14e8c1995334e8881a105123d0b9c0e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_f14e8c1995334e8881a105123d0b9c0e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_f14e8c1995334e8881a105123d0b9c0e.dll">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
PgUeAH0EPgUWACQIDAgWACoADAgWADQEDAgWABoEDAgeAJkGpAgeAM4BpAgGACMAvQcWABsJTgYa
AJwIXgYGAFQAPgUGABUAnwAGAIcBPgUGALoG6QcGAFcBPgUiAEAJ1AciAMYI1AcOAAAIlAESANkA
HwYSAMIBigASANYF4ggSAK0G4ggGAN4BPgUGAGMBPgUGAE8JxAUAAAAAWgAAAAAAAQABAAEAEABl
Be4AOQABAAEAAAAQABsHdwdZAAQABAAAARAAtAd3B3kABgAIAAMBAACACAAAYQAHAAsAAQAyBYQB
AQBwBYgBAQBFBYwBEQBSBZABEQADApQBEQASAZgBBgaCAJwBVoBgCJ8BVoDjAZ8BUCAAAAAAhgBr
BQYAAQAkIgAAAACGGNQGBgABACwiAAAAAIEAAQBqAAEAICMAAAAAgxjUBgYAAwAoIwAAAACTCHMG
owEDAFQjAAAAAJMI6wGoAQMAWyMAAAAAkwj3Aa0BAwBjIwAAAACWCK8IswEEAGojAAAAAIYY1AYG
AAQAciMAAAAAkRjaBrgBBAAAAAEAjwEAAAIALgUAAAEAVAQJANQGAQARANQGBgAZANQGCgApANQG
EAAxANQGEAA5ANQGEABBANQGEABJANQGEABRANQGEABZANQGEABhANQGEABpANQGBgC5ANQGBgDJ
ANQGBgDpANQGFQBxAHgILQD5AKYHMgABATUFOAAJAQMEPwCRANQGBgAZAdQGEACRAGgIQwCRADcI
SgAhAScJUAAxAdQGEAAMANUAZAA5AdQGagAhAaIFcAARAY4IdwARAZUIfQBBARkFhACRAMwAiwAU
ALsIngCZACIBowCZAA8JpwBZAboArQAcALsIngBhAU8CvQBhATUFxACpADUFygAkAMYG2AAsAAMJ
ngCxAHQE6AARAY4I7AB5AbQB9ACBATIJowCJAUcCBgD5ANMIAQCRATsJ+QBxANQGBgD5APwHCQGh
ATUFDwH5ALQFPwB5AO0FFQGJANQGGgGpAb4BIQGJAFEIKAG5AQ0ELgGpAVgJNgF5AP8FOgGxANQG
BgDJAXUBPwHJAUsJSAHRANQGTgHxANQGBgAIACAAegEIACQAfwEpAHsA8wEuAAsAywEuABMA1AEu
ABsA8wEuACMA/AEuACsAJQIuADMAJQIuADsAJQIuAEMA/AEuAEsAKwIuAFMAJQIuAFsAQgJDAGMA
fwFJAHsA8wFgAGsAfwFjAHMAfwHBAGsAfwEbAAABAwABAAQAAwAAAHcGvAEAAAsCwQEAALMIxgEC
AAUAAwACAAYABQABAAcABQACAAgABwBbAJYAtgDQAOEABIAAAAEAAABUIH1KAAAAAAAA7gAAAAQA
AAAAAAAAAAAAAFYBlgAAAAAADQAAAAAAAAAAAAAAXwGBBAAAAAANAAAAAAAAAAAAAABfAWMAAAAA
AAQAAAAAAAAAAAAAAFYBigAAAAAABAAAAAAAAAAAAAAAaAFOBgAAAAAGAAAAAAAAAAAAAABxATIG
AAAAAAQAAAAAAAAAAAAAAFYBPgUAAAAABAAAAAAAAAAAAAAAVgHUBwAAAAAAAAAAAQAAACUHAAAF
AAIAAAAAAAA8TWFpbj5nX19pbnNlcnR8M18wAElFbnVtZXJhYmxlYDEAVGFza2AxAEh0dHBIZWFk
ZXJWYWx1ZUNvbGxlY3Rpb25gMQBJRW51bWVyYXRvcmAxAEludDMyADxNb2R1bGU+AE1pY3Jvc29m
dC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFN5c3RlbS5EYXRhAG1zY29ybGliAFN5c3Rl
bS5Db2xsZWN0aW9ucy5HZW5lcmljAFJlYWRBc1N0cmluZ0FzeW5jAEdldEFzeW5jAEFkZABEYkNv
bW1hbmQAU3FsQ29tbWFuZABTVF9mMTRlOGMxOTk1MzM0ZTg4ODFhMTA1MTIzZDBiOWMwZQBkZWZh
dWx0SW5zdGFuY2UAZ2V0X0lzU3VjY2Vzc1N0YXR1c0NvZGUASHR0cFJlc3BvbnNlTWVzc2FnZQBW
YXJpYWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBD
b25zb2xlAG5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBXcml0ZUxpbmUAc2V0
X0NvbW1hbmRUeXBlAFNlY3VyaXR5UHJvdG9jb2xUeXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0
X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBs
aWNhdGlvblNldHRpbmdzQmFzZQBEaXNwb3NlAFBhcnNlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENv
bXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUARGVi
dWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUAQXNzZW1ibHlUaXRsZUF0
dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1
dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRy
aWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRy
aWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJU1NjcmlwdFRhc2tFbnRyeVBvaW50
QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0
dHJpYnV0ZQBnZXRfVmFsdWUAQWRkV2l0aFZhbHVlAEF1dGhlbnRpY2F0aW9uSGVhZGVyVmFsdWUA
TWVkaWFUeXBlV2l0aFF1YWxpdHlIZWFkZXJWYWx1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJz
aW9uaW5nAFRvU3RyaW5nAFVyaQBNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9z
b2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RNb2RlbABTeXN0
ZW0uQ29tcG9uZW50TW9kZWwAU1RfZjE0ZThjMTk5NTMzNGU4ODgxYTEwNTEyM2QwYjljMGUuZGxs
AHNldF9TZWN1cml0eVByb3RvY29sAHVybABjbQBnZXRfSXRlbQBTeXN0ZW0Ac3FsQ29tbQBFbnVt
AHJlc291cmNlTWFuAEpUb2tlbgBTY3JpcHRNYWluAHNxbENvbm4AU3lzdGVtLkNvbmZpZ3VyYXRp
b24AU3lzdGVtLkdsb2JhbGl6YXRpb24Ac2V0X0F1dGhvcml6YXRpb24AZ2V0X1RyYW5zYWN0aW9u
AFN5c3RlbS5SZWZsZWN0aW9uAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24AQWNxdWlyZUNvbm5lY3Rp
b24AUmVsZWFzZUNvbm5lY3Rpb24AU3FsQ29ubmVjdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24ATmV3
dG9uc29mdC5Kc29uAEN1bHR1cmVJbmZvAFN5c3RlbS5OZXQuSHR0cABOZXd0b25zb2Z0Lkpzb24u
TGlucQBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25NYW5hZ2VyAFNlcnZpY2VQb2ludE1h
bmFnZXIAU3FsUGFyYW1ldGVyAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IALmN0b3IALmNjdG9y
AFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3Rl
bS5SZXNvdXJjZXMAU1RfZjE0ZThjMTk5NTMzNGU4ODgxYTEwNTEyM2QwYjljMGUuUHJvcGVydGll
cy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVzAFNUX2YxNGU4YzE5OTUzMzRlODg4
MWExMDUxMjNkMGI5YzBlLlByb3BlcnRpZXMAZ2V0X1ZhcmlhYmxlcwBTZXR0aW5ncwBTeXN0ZW0u
VGhyZWFkaW5nLlRhc2tzAFN5c3RlbS5XaW5kb3dzLkZvcm1zAFN5c3RlbS5Db2xsZWN0aW9ucwBn
ZXRfQ29ubmVjdGlvbnMAU3lzdGVtLk5ldC5IdHRwLkhlYWRlcnMASHR0cFJlcXVlc3RIZWFkZXJz
AGdldF9EZWZhdWx0UmVxdWVzdEhlYWRlcnMAZ2V0X1BhcmFtZXRlcnMAU3VjY2VzcwBzZXRfQmFz
ZUFkZHJlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1bHRzAENvbmNhdABGb3JtYXQASk9iamVjdABTeXN0
ZW0uTmV0AGdldF9EZWZhdWx0AGdldF9SZXN1bHQARGlhbG9nUmVzdWx0AHNldF9UYXNrUmVzdWx0
AFN5c3RlbS5EYXRhLlNxbENsaWVudABIdHRwQ2xpZW50AGdldF9DdXJyZW50AGdldF9Db250ZW50
AEh0dHBDb250ZW50AGdldF9BY2NlcHQATW92ZU5leHQAU2hvdwBNZXNzYWdlQm94AGdldF9Bc3Nl
bWJseQBFeGVjdXRlTm9uUXVlcnkAABNXAHIAaQBrAGUAXwBVAHIAbAAAIWEAcABwAGwAaQBjAGEA
dABpAG8AbgAvAGoAcwBvAG4AAIKnZQB5AEoAMABkAEMASQA2AEkAbgBBAGkATABDAEoAaABiAEcA
YwBpAE8AaQBKAEkAVQB6AEkAMQBOAGkASQBzAEkAbgBSADIASQBqAG8AaQBNAFMASgA5AC4AZQB5
AEoAawBJAGoAbwBpAGUAMQB3AGkAWQBWAHcAaQBPAGoATQA1AE8AVABFAHkATgBUAFEAcwBYAEMA
SgBwAFgAQwBJADYATwBEAEkAMQBPAFQATQB5AE4AeQB4AGMASQBtAE4AYwBJAGoAbwAwAE4AagBN
AHoATQBqAGsANABMAEYAdwBpAGQAVgB3AGkATwBqAEUAeABPAEQAWQAyAE4AVABJADIATABGAHcA
aQBjAGwAdwBpAE8AbAB3AGkAVgBWAE4AYwBJAGkAeABjAEkAbgBOAGMASQBqAHAAYgBYAEMASgBY
AFgAQwBJAHMAWABDAEoARwBYAEMASQBzAFgAQwBKAEoAWABDAEkAcwBYAEMASgBWAFgAQwBJAHMA
WABDAEoATABYAEMASQBzAFgAQwBKAEQAWABDAEkAcwBYAEMASgBFAFgAQwBJAHMAWABDAEoATgBY
AEMASQBzAFgAQwBKAEIAWABDAEkAcwBYAEMASgBNAFgAQwBJAHMAWABDAEoAUQBYAEMASgBkAEwA
RgB3AGkAZQBsAHcAaQBPAGwAdABkAEwARgB3AGkAZABGAHcAaQBPAGoAQgA5AEkAaQB3AGkAYQBX
AEYAMABJAGoAbwB4AE4AagBVADAATgB6AFEAegBOAGoATQAxAGYAUQAuAGIAMAAtAGwAdAAxAFgA
UABlAHAAOQA3ADUAcQBEAFMAcQBJAHoAZgB1ADMARQBhAGUAaQBVADEASwBtADkAWQBqAGoAQQBE
AFMAMwBsADcASgBWAHcAAQ1CAGUAYQByAGUAcgAAGS8AZABhAHQAYQBfAGUAeABwAG8AcgB0AAAJ
ZABhAHQAYQAAE3IAZQBzAG8AdQByAGMAZQBzAAABAAluAGEAbQBlAAAHdQByAGwAAA1uAGEAbQBl
ADoAIAAAESAALQAgAHUAcgBsADoAIAABF0kAbgBzAGUAcgB0ACAAZgBhAGkAbAAAHUwAbwBhAGQA
IABkAGEAdABhACAAZgBhAGkAbAAAKUMAVABSAFUATwBOAEcALgBEAEIAXwBHAG8AYwBfAFcAcgBp
AGsAZQAAZ0kAbgBzAGUAcgB0ACAAaQBuAHQAbwAgAEQAYQB0AGEAXwBVAFIATAAoAG4AYQBtAGUA
LAAgAHUAcgBsACkAIAB2AGEAbAB1AGUAcwAoAEAAbgBhAG0AZQAsACAAQAB1AHIAbAApAAALQABu
AGEAbQBlAAAJQAB1AHIAbAAAgRtEAGUAbABlAHQAZQAgAGYAcgBvAG0AIABEAGEAdABhAF8AVQBS
AEwAIAB3AGgAZQByAGUAIABuAGEAbQBlACAAaQBuACAAKAAnAGEAdQBkAGkAdABfAGwAbwBnACcA
LAAnAHcAbwByAGsAXwBjAG8AbQBtAGUAbgB0AF8AYwBvAG4AdABlAG4AdAAnACwAJwB3AG8AcgBr
AF8AYwB1AHMAdABvAG0AXwBmAGkAZQBsAGQAXwBoAGkAcwB0AG8AcgB5ACcALAAnAHcAbwByAGsA
XwBkAGUAcwBjAHIAaQBwAHQAaQBvAG4AJwAsACcAdwBvAHIAawBfAHQAaQBtAGUAbABvAGcAXwBj
AG8AbQBtAGUAbgB0ACcAKQABGUMAbwBuAG4AZQBjAHQAIABmAGEAaQBsAABxUwBUAF8AZgAxADQA
ZQA4AGMAMQA5ADkANQAzADMANABlADgAOAA4ADEAYQAxADAANQAxADIAMwBkADAAYgA5AGMAMABl
AC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAAAB/9gtmHO36So/1
W1ou36PQAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFxEQcIDhJJDg4STQ4OFRJRARJVBCAAEn0F
IAASgIEGIAESgIUcAyAAHAYgAQESgI0FIAASgJEKIAAVEoCVARKAmQgVEoCVARKAmQUgAQETAAUg
AgEODgYgAQESgJ0FAAIODg4GAAIODh0cBgABARGApQogARUSgKkBEk0OBxUSgKkBEk0EIAATAAMg
AAIFIAASgK0IIAAVEoCpAQ4GFRKAqQEOBgABEoCxDgUgARJVDgUgARJVHAcVEoC5ARJVCCAAFRJR
ARMABhUSUQESVQMgAA4HAAQODg4ODgQAAQEOBgABEYDNDggHAxJBEkUSRQUgABKA0QUgARI9HAQg
ARwcBiACAQ4SQQYgAQERgNkFIAASgN0HIAISgOEOHAMgAAgEIAEBHAgAARKA5RGA6QUgABKA7Qcg
AgEOEoDtCLd6XFYZNOCJCImEXc2AgMyRCLA/X38R1Qo6CDCtT+aypq7tBAAAAAAEAQAAAAMGEj0D
BhJBAwYSRQMGEmkDBhJtAwYSEAIGCAMGERQEAAASaQQAABJtBQABARJtBAAAEhADAAABBAgAEmkE
CAASbQQIABIQCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAA
ACgBACNTVF9mMTRlOGMxOTk1MzM0ZTg4ODFhMTA1MTIzZDBiOWMwZQAABQEAAAAAFgEAEUNvcHly
aWdodCBAICAyMDIyAABJAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjUBAFQOFEZyYW1ld29y
a0Rpc3BsYXlOYW1lEi5ORVQgRnJhbWV3b3JrIDQuNbQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJl
c291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVy
ZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJj
ZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAACcPAAAAAAAAAAAAAC2
PAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAqDwAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2Nv
cmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABAH1KVCAAAAEAfUpUID8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBU
AF8AZgAxADQAZQA4AGMAMQA5ADkANQAzADMANABlADgAOAA4ADEAYQAxADAANQAxADIAMwBkADAA
YgA5AGMAMABlAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADgAMgA3
ADYALgAxADkAMAA2ADkAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8A
ZgAxADQAZQA4AGMAMQA5ADkANQAzADMANABlADgAOAA4ADEAYQAxADAANQAxADIAMwBkADAAYgA5
AGMAMABlAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8A
cAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAyADIAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABl
AG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUA
AABTAFQAXwBmADEANABlADgAYwAxADkAOQA1ADMAMwA0AGUAOAA4ADgAMQBhADEAMAA1ADEAMgAz
AGQAMABiADkAYwAwAGUALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAA
UwBUAF8AZgAxADQAZQA4AGMAMQA5ADkANQAzADMANABlADgAOAA4ADEAYQAxADAANQAxADIAMwBk
ADAAYgA5AGMAMABlAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA4ADIANwA2AC4AMQA5ADAANgA5AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBz
AGkAbwBuAAAAMQAuADAALgA4ADIANwA2AC4AMQA5ADAANgA5AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAMg8AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{3554468F-DBBA-4401-9C65-1BC069924522}"
      DTS:From="Package\Load Data_URL"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Creat and load data to table" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="210.4,41.6"
          Id="Package\Creat and load data to table"
          TopLeft="76.428572730142,168.129412697756" />
        <NodeLayout
          Size="210.4,41.6"
          Id="Package\Creat and load data to table 1 1"
          TopLeft="343.571434422415,53.5294125154357" />
        <NodeLayout
          Size="151.2,41.6"
          Id="Package\Load Data_URL"
          TopLeft="87.1428586268909,59.6470596600564" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="162.742858626891,101.247059660056">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="18.8857141032511,66.8823530376996"
              Start="0,0"
              End="18.8857141032511,59.3823530376996">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.4411765188498" />
                  <mssgle:CubicBezierSegment
                    Point1="0,29.4411765188498"
                    Point2="0,33.4411765188498"
                    Point3="4,33.4411765188498" />
                  <mssgle:LineSegment
                    End="14.8857141032511,33.4411765188498" />
                  <mssgle:CubicBezierSegment
                    Point1="14.8857141032511,33.4411765188498"
                    Point2="18.8857141032511,33.4411765188498"
                    Point3="18.8857141032511,37.4411765188498" />
                  <mssgle:LineSegment
                    End="18.8857141032511,59.3823530376996" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>